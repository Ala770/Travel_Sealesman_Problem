#include<iostream>
using namespace std;
//a class project for Algo 2018 - TSP using DP algo - prepared by Ala
int ary[34][34],completed[34],n,cost=0,line=0,startCity=0;
string citiesNames[34]={ "Hefei", "Beijing",	"Chongqing", "Fuzhou",	"Lanzhou", "Guangzhou",
       "Nanning", "Guiyang", "Haikou", "Shijiazhuang", "Harbin", "Zhengzhou",
       "Hong Kong", "Wuhan", "Changsha", "Hohhot", "Nanjing", "Nanchang", "Changchun",	"Shenyang", "Macau", "Yinchuan", "Xining" "Xi'an", "Jinan",	"Shanghai", "Taiyuan",	"Chengdu",	"Tianjin", "Lhasa", "Urumqi",	"Kunming",	"Hangzhou",	"Taipei"
                                };

void getInput()
{
    cout<<"This program calculates the best optimal path for TSP through whole Chinese capital cities \n";
    cout<<"This program is part of final project of GETAI1031 - Design and Analysis of Algorithms course \n";
    cout<<"Prepared by: Umar - Ala - Huda"<<"\n";
    cout<<"------------------------------------------------------------------------------------"<<"\n";
    int  chinaMatrix[34][34] = {
{0,	902,	1022,	670,	1322,	1043,	1330,	1178,	1486,	735,	1750,	467,	1093,	309,	575,	1117,	150,	373,	1511,	1240,	1131,	1244,	1516,	822,	537,	408,	797,	1260,	837,	2501,	2904,	1605,	328,	866},
{902,	0,	1452,	1562,	1181,	1890,	2047,	1731,	2288,	264,	1054,	624,	1961,	1053,	1338,	408,	899,	1250,	857,	627,	1989,	891,	1328,	906,	367,	1068,	403,	1526,	102,	2564,	2413,	2098,	1124,	1724},
{1022,	1452,	0,	1275,	792,	945,	750,	311,	1096,	1188,	2499,	866,	1063,	724,	602,	1343,	1173,	874,	2285,	2026,	1043,	1010,	932,	579,	1244,	1412,	1074,	302,	1460,	1526,	2342,	647,	1281,	1529},
{670,	1562,	1275,	0,	1842,	692,	1164,	1264,	1147,	1406,	2288,	1107,	666,	701,	673,	1785,	668,	446,	2048,	1791,	726,	1845,	2031,	1354,	1195,	612,	1458,	1572,	1488,	2792,	3467,	1658,	475,	255},
{1322,	1181,	792,	1842,	0,	1702,	1537,	1080,	1888,	973,	2184,	899,	1816,	1147,	1222,	870,	1448,	1395,	2019,	1808,	1806,	343,	194,	502,	1191,	1717,	800,	611,	1244,	1382,	1627,	1248,	1648,	2091},
{1043,	1890,	945,	692,	1702,	0,	503,	775,	467,	1664,	2793,	1293,	119,	837,	568,	1976,	1133,	670,	2554,	2283,	107,	1835,	1863,	1317,	1550,	1213,	1642,	1232,	1846,	2318,	3287,	1078,	1049,	869},
{1330,	2047,	750,	1164,	1537,	503,	0,	461,	362,	1793,	3039,	1423,	592,	1047,	757,	2031,	1454,	994,	2807,	2536,	536,	1756,	1661,	1284,	1755,	1599,	1722,	963,	2027,	1878,	3014,	608,	1436,	1364},
{1178,	1731,	311,	1264,	1080,	775,	461,	0,	820,	1467,	2766,	1122,	892,	868,	647,	1648,	1324,	937,	2545,	2280,	857,	1318,	1200,	884,	1490,	1531,	1367,	503,	1729,	1555,	2565,	428,	1382,	1506},
{1486,	2288,	1096,	1147,	1888,	467,	362,	820,	0,	2046,	3233,	1670,	482,	1244,	952,	2319,	1588,	1119,	2996,	2724,	422,	2088,	2018,	1596,	1967,	1680,	1997,	1323,	2255,	2197,	3376,	929,	1516,	1293},
{735,	264,	1188,	1406,	973,	1664,	1793,	1467,	2046,	0,	1315,	375,	1742,	829,	1102,	391,	771,	1049,	1111,	868,	1766,	725,	1137,	648,	277,	989,	173,	1269,	286,	2345,	2340,	1834,	1008,	1593},
{1750,	1054,	2499,	2288,	2184,	2793,	3039,	2766,	3233,	1315,	0,	1644,	2838,	1997,	2292,	1315,	1668,	2123,	240,	510,	2879,	1856,	2298,	1960,	1286,	1680,	1454,	2579,	1039,	3555,	3050,	3147,	1815,	2354},
{467,	624,	866,	1107,	899,	1293,	1423,	1122,	1670,	375,	1644,	0,	1375,	466,	728,	698,	565,	707,	1423,	1161,	1396,	780,	1090,	431,	380,	830,	360,	1008,	609,	2187,	2444,	1512,	789,	1324},
{1093,	1961,	1063,	666,	1816,	119,	592,	892,	482,	1742,	2838,	1375,	0,	912,	659,	2065,	1171,	721,	2597,	2329,	62,	1942,	1979,	1422,	1613,	1224,	1729,	1351,	1911,	2430,	3405,	1182,	1063,	814},
{309,	1053,	724,	701,	1147,	837,	1047,	868,	1244,	829,	1997,	466,	912,	0,	294,	1163,	457,	260,	1763,	1491,	937,	1148,	1339,	654,	723,	688,	826,	980,	1013,	2228,	2768,	1295,	562,	945},
{575,	1338,	602,	673,	1222,	568,	757,	647,	952,	1102,	2292,	728,	659,	294,	0,	1408,	706,	290,	2057,	1785,	673,	1300,	1402,	779,	1016,	889,	1074,	898,	1302,	2126,	2845,	1072,	736,	928},
{1117,	408,	1343,	1785,	870,	1976,	2031,	1648,	2319,	391,	1315,	698,	2065,	1163,	1408,	0,	1162,	1404,	1163,	981,	2082,	540,	984,	764,	659,	1380,	337,	1336,	506,	2240,	2006,	1960,	1399,	1981},
{150,	899,	1173,	668,	1448,	1133,	1454,	1324,	1588,	771,	1668,	565,	1171,	457,	706,	1162,	0,	470,	1427,	1160,	1214,	1345,	1641,	952,	533,	269,	861,	1409,	821,	2649,	3010,	1752,	237,	827},
{373,	1250,	874,	446,	1395,	670,	994,	937,	1119,	1049,	2123,	707,	721,	260,	290,	1404,	470,	0,	1883,	1613,	758,	1408,	1585,	909,	894,	611,	1067,	1159,	1194,	2400,	3020,	1360,	452,	697},
{1511,	857,	2285,	2048,	2019,	2554,	2807,	2545,	2996,	1111,	240,	1423,	2597,	1763,	2057,	1163,	1427,	1883,	0,	272,	2639,	1701,	2146,	1760,	1058,	1441,	1260,	2380,	828,	3399,	3001,	2933,	1575,	2118},
{1240,	627,	2026,	1791,	1808,	2283,	2536,	2280,	2724,	868,	510,	1161,	2329,	1491,	1785,	981,	1160,	1613,	272,	0,	2369,	1506,	1948,	1514,	790,	1190,	1027,	2134,	581,	3191,	2910,	2673,	1316,	1875},
{1131,	1989,	1043,	726,	1806,	107,	536,	857,	422,	1766,	2879,	1396,	62,	937,	673,	2082,	1214,	758,	2639,	2369,	0,	1942,	1965,	1424,	1645,	1276,	1747,	1326,	1942,	2386,	3385,	1132,	1114,	876},
{1244,	891,	1010,	1845,	343,	1835,	1756,	1318,	2088,	725,	1856,	780,	1942,	1148,	1300,	540,	1345,	1408,	1701,	1506,	1942,	0,	444,	521,	981,	1606,	556,	903,	968,	1700,	1664,	1548,	1569,	2079},
{1516,	1328,	932,	2031,	194,	1863,	1661,	1200,	2018,	1137,	2298,	1090,	1979,	1339,	1402,	984,	1641,	1585,	2146,	1948,	1965,	444,	0,	696,	1369,	1911,	964,	705,	1398,	1257,	1443,	1310,	1843,	2281},
{822,	906,	579,	1354,	502,	1317,	1284,	884,	1596,	648,	1960,	431,	1422,	654,	779,	764,	952,	909,	1760,	1514,	1424,	521,	696,	0,	784,	1222,	509,	620,	933,	1756,	2114,	2114,	1207,	1598},
{537,	367,	1244,	1195,	1191,	1550,	1755,	1490,	1967,	277,	1286,	380,	1613,	723,	1016,	659,	533,	894,	1058,	790,	1645,	981,	1369,	784,	0,	724,	427,	1384,	300,	2534,	2615,	1889,	763,	1360},
{408,	1068,	1412,	612,	1717,	1213,	1599,	1531,	1680,	989,	1680,	830,	1224,	688,	889,	1380,	269,	611,	1441,	1190,	1276,	1606,	1911,	1222,	724,	0,	1101,	1662,	977,	2907,	3271,	1959,	165,	689},
{797,	403,	1074,	1458,	800,	1642,	1722,	1367,	1997,	173,	1454,	360,	1729,	826,	1074,	337,	861,	1067,	1260,	1027,	1747,	556,	964,	509,	427,	1101,	0,	1125,	449,	2175,	2191,	1713,	1097,	1663},
{1260,	1526,	302,	1572,	611,	1232,	963,	503,	1323,	1269,	2579,	1008,	1351,	980,	898,	1336,	1409,	1159,	2380,	2134,	1326,	903,	705,	620,	1384,	1662,	1125,	0,	1554,	1248,	2067,	645,	1543,	1827},
{837,	102,	1460,	1488,	1244,	1846,	2027,	1729,	2255,	286,	1039,	609,	1911,	1013,	1302,	506,	821,	1194,	828,	581,	1942,	968,	1398,	933,	300,	977,	449,	1554,	0,	2623,	2512,	2108,	1041,	1640},
{2501,	2564,	1526,	2792,	1382,	2318,	1878,	1555,	2197,	2345,	3555,	2187,	2430,	2228,	2126,	2240,	2649,	2400,	3399,	3191,	2386,	1700,	1257,	1756,	2534,	2907,	2175,	1248,	2623,	0,	3043,	1272,	2791,	3043},
{2904,	2413,	2342,	3467,	1627,	3287,	3014,	2565,	3376,	2340,	3050,	2444,	3405,	2768,	2845,	2006,	3010,	3020,	3001,	2910,	3385,	1664,	1443,	2114,	2615,	3271,	2191,	2067,	2512,	3043,	0,	2521,	3231,	3713},
{1605,	2098,	647,	1658,	1248,	1078,	608,	428,	929,	1834,	3147,	1512,	1182,	1295,	1072,	1960,	1752,	1360,	2933,	2673,	1132,	1548,	1310,	2114,	1889,	1959,	1713,	645,	2108,	1272,	2521,	0,	1809,	1889},
{328,	1124,	1281,	475,	1648,	1049,	1436,	1382,	1516,	1008,	1815,	789,	1063,	562,	736,	1399,	237,	452,	1575,	1316,	1114,	1569,	1843,	1207,	763,	165,	1097,	1543,	1041,	2791,	3231,	1809,	0,	599},
{866,	1724,	1529,	255,	2091,	869,	1364,	1506,	1293,	1593,	2354,	1324,	814,	945,	928,	1981,	827,	697,	2118,	1875,	876,	2079,	2281,	1598,	1360,	689,	1663,	1827,	1640,	3043,	3713,	1889,	599,	0}
};
    //the costs matrix of whole cites
    int i,j;
    n=34;
    for(i=0; i<n;i++)
    {
        cout<<i+1<<" -   "<<citiesNames[i]<<"    \t";
        if ((i!=0) && ( i%4) ==0 )
        {
            cout<<"\n";  // just for neat output
        }
    } // end of city list loop
    cout<<"\nPlease, enter the number of the city you would like to start your journey from using the numbers above:";
    cin>>startCity; // the start of journey
    for(i=0;i < n;i++)
    {
        //record all visited cities
        for( j=0;j < n;j++)
            ary[i][j]=chinaMatrix[i][j];
        completed[i]=0;
    }
    cout<<"\n------------------------------------------------------------------------------------\n";
    cout<<"\nThe cost list is:";

    for( i=0;i < n;i++)
    {
        cout<<"\n";

        for(j=0;j < n;j++)
            cout<<ary[i][j]<<"\t";
    }
    cout<<"\n------------------------------------------------------------------------------------\n";
}

int least(int c)
{
    int i,nc=10000;
    int min=10000,kmin;

    for(i=0;i < n;i++)
    {
        if((ary[c][i]!=0)&&(completed[i]==0))
            if(ary[c][i]+ary[i][c] < min)
            {
                min=ary[i][0]+ary[c][i];
                kmin=ary[c][i];
                nc=i;
            }
    }
    if(min!=9999)
        cost+=kmin;
    return nc;
}
void mincost(int city)
{
    int i,ncity;
    completed[city]=1;
    cout<<city+1<<" - \t" <<citiesNames[city] <<"   \t ---> "<<"\n";
    // in case we want only numeric path : cout<<city+1<<"->";
    ncity=least(city);

    if(ncity==9999)
    {
        ncity=0;
        cout<<startCity<<" - \t" <<citiesNames[startCity-1]<<"\t (End of journey and back to start point)";
        cost+=ary[city][ncity];
        return;
    }

    mincost(ncity);
}
int main()
{
    getInput();
    cout<<"\n\nThe best optimal path is:\n";
    mincost(startCity-1); //passing selected start point by user
    cout<<"\n\n Minimum cost is ( "<<cost<<" ) \n";
    return 0;
}
